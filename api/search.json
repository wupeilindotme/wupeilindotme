[{"id":"26fbf97bdbdca6fb6a94451b516c7952","title":"java-tree-node","content":"","slug":"java-tree-node","date":"2023-07-05T16:33:32.000Z","categories_index":"","tags_index":"","author_index":"Peilin"},{"id":"00c071c4589539354f157ade6456752e","title":"vue-dragbox 叠层拖动框","content":"vue dragbox - 拖动框前言在工作中，遇到这样一个需求： 甲方老板需要系统内的所有弹窗做成类似windows桌面那样， 可以拖动且按层级展示。\n那本文就用vue来实现一个通用的拖动框组件。\n思想要实现这个功能，可以分为以下几步：\n\n拖动\n改变元素的x , y定位， 可以联想到使用css中的 transform : translate() ； \n拖动可以拆解为3个动作：\n\n鼠标按下 mousedown\n鼠标拖动 mousemove\n鼠标弹起 mouseup\n\n\n层级\n点击某个弹窗，将该弹窗的zIndex设置为比当前zIndex更大即可； 如果是用的element-ui， 可以使用 PopupManager.js 实现层级管理\n\n组件封装\n使用插槽的方式，将弹窗内容包含在该组件里面\n\n\n代码实现&lt;template&gt;\n  &lt;div\n    class&#x3D;&quot;draggable-box&quot;\n    :class&#x3D;&quot;draggable?&#39;cursorM&#39;:&#39;&#39;&quot;\n    :style&#x3D;&quot;&#123;\n      width: &#96;$&#123;width&#125;px&#96;,\n      height: &#96;$&#123;height&#125;px&#96;,\n      backgroundColor: background,\n      transform: &#96;translate($&#123;x&#125;px, $&#123;y&#125;px)&#96;,\n      zIndex: zIndex,\n    &#125;&quot;\n    @mousedown.prevent&#x3D;&quot;dragStart&quot;\n    @mousemove.prevent&#x3D;&quot;drag&quot;\n    @mouseup.prevent&#x3D;&quot;dragEnd&quot;\n  &gt;\n    &lt;slot&gt;&lt;&#x2F;slot&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script&gt;\n  import &#123; PopupManager &#125; from &#39;element-ui&#x2F;lib&#x2F;utils&#x2F;popup&#39;;\n\n  export default &#123;\n    name: &#39;DraggableBox&#39;,\n    props: &#123;\n      x: &#123;\n        type: Number,\n        default: 0,\n      &#125;,\n      y: &#123;\n        type: Number,\n        default: 0,\n      &#125;,\n      width: &#123;\n        type: Number,\n        default: 5120,\n      &#125;,\n      height: &#123;\n        type: Number,\n        default: 0,\n      &#125;,\n      background: &#123;\n        type: String,\n        default: &#39;transparent&#39;,\n      &#125;,\n      zIndex: &#123;\n        type: Number,\n        &#x2F;&#x2F; 默认为当前层级+100\n        default: PopupManager.nextZIndex() + 100,\n      &#125;,\n      draggable: &#123;\n        type: Boolean,\n        default: true\n      &#125;\n    &#125;,\n    data() &#123;\n      return &#123;\n        isDragging: false,\n        startPosition: &#123; x: 0, y: 0 &#125;,\n      &#125;\n    &#125;,\n    methods: &#123;\n      &#x2F;&#x2F; 开始拖动\n      dragStart(event) &#123;\n        if(this.draggable)&#123;\n          this.isDragging &#x3D; true\n          this.startPosition.x &#x3D; event.clientX - this.x\n          this.startPosition.y &#x3D; event.clientY - this.y\n          &#x2F;&#x2F; 开始拖动时，将当前zIndex设置为最大，实现弹窗层级\n          this.zIndex &#x3D; PopupManager.nextZIndex();\n        &#125;\n      &#125;,\n      &#x2F;&#x2F; 拖动中改变 x,y\n      drag(event) &#123;\n        if(this.draggable) &#123;\n          if (!this.isDragging) return\n          this.x &#x3D; event.clientX - this.startPosition.x\n          this.y &#x3D; event.clientY - this.startPosition.y\n        &#125;\n      &#125;,\n      &#x2F;&#x2F; 拖动结束\n      dragEnd() &#123;\n        this.isDragging &#x3D; false\n      &#125;,\n    &#125;,\n  &#125;\n&lt;&#x2F;script&gt;\n\n&lt;style scoped&gt;\n  .cursorM&#123;\n    cursor: move;\n\n  &#125;\n  .draggable-box &#123;\n    position: absolute;\n  &#125;\n&lt;&#x2F;style&gt;\n\n\n\n\n示例&lt;template&gt;\n\t&lt;DragBox&gt;\n        &lt;!-- 在此处定义你的对话框内容 --&gt;\n    \t&lt;div class&#x3D;&quot;dialog&quot;&gt;\n    \t\tLife Oriented Programming\n    \t&lt;&#x2F;div&gt;\n    &lt;&#x2F;DragBox&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script&gt;\n&#x2F;&#x2F; 换成自己的项目路径\nimport DragBox from &#39;@&#x2F;components&#x2F;Dragbox&#39;;\n    \nexport default &#123;\n    name: &#39;mytest&#39;,\n    components: &#123;DragBox&#125;,\n    data() &#123;\n        return &#123;\n            \n        &#125;\n    &#125;\n&#125;\n\n&lt;&#x2F;script&gt;\n\n&lt;style scoped&gt;\n    .dialog &#123;\n        position: absolute;\n        width: 1000px;\n        height: 500px;\n        border: 1px solid #FFF;\n    &#125;\n&lt;&#x2F;style&gt;\n\n\n\n\n以上就是使用vue实现拖动框组件的内容。\nLife Oriented Programming\n","slug":"vue-dragbox","date":"2023-07-05T16:27:23.000Z","categories_index":"","tags_index":"vue.js,前端","author_index":"Peilin"},{"id":"bb404c7dbd8eec4e7c8b388c731f8864","title":"nvm","content":"前言在使用Hexo搭建博客时，推荐安装16.x以上版本的nodejs。 但是自己电脑工作时所用的node版本是14.x， 如果为了搭建博客又去安装其他版本的node，需要手动去切换环境变量。 切换来回避免不了麻烦甚至出错，于是想着有没有一个更加好的解决方案。   \n这就是本文要介绍的 NVM (Node enVironment Manager) —— 一个node环境管理工具。\n\nNVM安装windows用户\n安装\nwindows用户可以通过 Releases nvm-windows下载 setup.exe 进行安装\n\n\n\n进入上路链接github仓库， 找到 v1.1.11 下的 Assets， 找到 nvm-setup.exe 下载\n\n双击启动 .exe 进行安装\n\n选择nvm 的安装路径\n\n选择node的安装路径\n\n打开控制台，输入 nvm -v 如果正确展示版本表示安装成功\n\n\n注意：两者路径都可以自定义，一定不要带中文（大部分开发软件都是如此）\nlinux用户\n安装\n\n使用curl 或者 wget\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.38.0/install.sh | bash\n\n安装脚本运行后，会在您的主目录下创建一个 .nvm 文件夹，并在您的 shell 配置文件（例如 .bashrc、.zshrc 或 .profile）中添加必要的配置。\n\n执行 nvm --version 查看安装情况\n\n\n\n\n\nNVM使用接下来介绍NVM的一些常用指令\n查看版本# 查看nvm版本\nnvm -v \n# 查看目前（已安装）可用的node版本\nnvm list \n\n# 查看可安装的node版本\nnvm list available \n\n\n\nnode 安装&#x2F;卸载安装\n# 使用nvm安装指定版本的nodejs\nnvm install &lt;node version> \n\n# 安装16.14.0 版本的nodejs\nnvm install 16.14.0 \n\n# 使用nvm安装稳定版nodejs\nnvm install stable\n\n\n\n卸载\n# 指定卸载版本\nnvm uninstall &lt;version> \n\n# 指定卸载16.14.0版本的nodejs\nnvm unistall 16.14.0 \n\n\n\nnode 版本切换# 指定node版本为当前node环境\nnvm use &lt;node version>\n\n# 指定使用 16.14.0的node版本\nnvm use 16.14.0 \n\n# 指定默认版本\nnvm alias default &lt;version> \n\n\n\n示例# 安装完成后执行\nnvm -v\n>> \n1.1.10\n\n# 查看可安装的node版本\nnvm list available\n>> \n|   CURRENT    |     LTS      |  OLD STABLE  | OLD UNSTABLE |\n|--------------|--------------|--------------|--------------|\n|    20.3.1    |   18.16.1    |   0.12.18    |   0.11.16    |\n|    20.3.0    |   18.16.0    |   0.12.17    |   0.11.15    |\n|    20.2.0    |   18.15.0    |   0.12.16    |   0.11.14    |\n|    20.1.0    |   18.14.2    |   0.12.15    |   0.11.13    |\n|    20.0.0    |   18.14.1    |   0.12.14    |   0.11.12    |\n|    19.9.0    |   18.14.0    |   0.12.13    |   0.11.11    |\n|    19.8.1    |   18.13.0    |   0.12.12    |   0.11.10    |\n|    19.8.0    |   18.12.1    |   0.12.11    |    0.11.9    |\n|    19.7.0    |   18.12.0    |   0.12.10    |    0.11.8    |\n|    19.6.1    |   16.20.1    |    0.12.9    |    0.11.7    |\n|    19.6.0    |   16.20.0    |    0.12.8    |    0.11.6    |\n|    19.5.0    |   16.19.1    |    0.12.7    |    0.11.5    |\n|    19.4.0    |   16.19.0    |    0.12.6    |    0.11.4    |\n|    19.3.0    |   16.18.1    |    0.12.5    |    0.11.3    |\n|    19.2.0    |   16.18.0    |    0.12.4    |    0.11.2    |\n|    19.1.0    |   16.17.1    |    0.12.3    |    0.11.1    |\n|    19.0.1    |   16.17.0    |    0.12.2    |    0.11.0    |\n|    19.0.0    |   16.16.0    |    0.12.1    |    0.9.12    |\n|   18.11.0    |   16.15.1    |    0.12.0    |    0.9.11    |\n|   18.10.0    |   16.15.0    |   0.10.48    |    0.9.10    |\n\nThis is a partial list. For a complete list, visit https://nodejs.org/en/download/releases\n\n# 从上面选择一个你需要的版本安装\nnvm install 16.14.0\nnvm install 14.13.3\n\n# 安装成功后， nvm list 查看已安装版本\nnvm list\n>>\n  16.14.0\n* 14.15.3 (Currently using 64-bit executable)\n\n# 切换node版本\nnvm use 16.14.0\n>>\n  Now using node 16.14.0（64 bit）\n  \n# 验证是否切换成功\nnode -v\nnpm -v\n\n这样就可以实现node版本控制了。 \n最后需要注意的是，此时只是切换了系统中的node环境变量，此时你的开发编辑器中的需要 手动切换 一下。 \nnvm使用 symlink 实现node版本控制， 在安装nvm的时候，会让你指定一个 symlink 的本地文件路径， 这个 symlink 会指向你当前 nvm use  版本的node根目录； 打开电脑的环境变量配置其实可以看见 NVM_SYMLINK ， 这个其实就是你的nodejs环境变量，只不过是由nvm进行管理的。\nsymlink - 符号链接，属于软连接\n只需要在编辑器中设置 NVM_SYMLINK 指向的路径即可， 如我的路径是 C:\\Program Files\\nodejs \n\n以上。\nBy Peilin\n— Life Oriented Programming —\n","slug":"nvm","date":"2023-06-23T22:59:01.000Z","categories_index":"","tags_index":"nodejs,开发环境管理","author_index":"Peilin"},{"id":"60483de8f62e71e12cab19b058a7262d","title":"Markdown学习","content":"Markdown 学习背景无论是使用Hexo、Hugo或是Jekyll搭建自己的博客写博文，还是用来编写文档，markdown语法的使用必不可少。 在本地可以下载 Typora — 一款支持markdown(md) 语法的编辑器， 可以更快速、更效率的编写md文档，这里就不过多介绍。  但如果是想在github 直接进行文档编写，那最好是要熟悉一下md语法。\n另外，如果需要编写docx \\ pdf 文档， 也可以使用markdown， 在编写完成后用插件转换即可。\n以下是正题\n\n语法文本标题可以看到本文的一些标题，就是用md语法实现的\n\nTypora中快捷键  Ctrl  1 2 3 4 5 6  为对应的标题 \n\n示例代码\n\n\n# 这是一级标题\n## 这是二级标题\n### 这是三级标题\n#### 这是四级标题\n##### 这是五级标题\n###### 这是六级标题\n\n​\t当然你也可以使用html，得到的效果是一样的\n&lt;h1>这是一级标题&lt;/h1>\n&lt;h2>这是一级标题&lt;/h2>\n&lt;h3>这是一级标题&lt;/h3>\n&lt;h4>这是一级标题&lt;/h4>\n&lt;h5>这是一级标题&lt;/h5>\n&lt;h6>这是一级标题&lt;/h6>\n\n\n效果如下\n\n\n\n字体\n加粗\n\n说明：在文本两侧加 **；Typora快捷键： Ctrl  B\n\n示例代码 \n**我变粗了**\n\n\n斜体\n\n说明：在文本两侧加 *，Typora快捷键： Ctrl  I\n\n示例代码 \n*我变斜了*\n\n\n斜体加粗\n\n说明：在文本两侧加 ***\n\n示例代码 \n***我又斜又粗***\n\n\n删除\n\n说明：在文本两侧加 ~~ ；快捷键： Alt Shift 5  \n\n示例代码 \n~~我被删除了~~\n\n\n效果如下\n我变粗了\n我变斜了\n我又粗又斜\n我被删除了\n\n\n段落\n说明： 使用空格分隔一行或多行文本\n\n换行\n说明： 使用 &lt;br&gt; ，或者在结尾使用两个空格或多个空格结束一行\n\n代码单行代码\n说明 见代码\n\n代码\n使用 `` 引用起来\n如 `abc`\n\n效果\nabc\n\n\n代码块\n说明 使用 &#96;&#96;&#96; 加任意可识别的编程语言\n\n示例代码\n​```java\n\tpublic static void main(String[] args) &#123;\n\t\tSystem.out.println(\"Hello Peilin\");\n\t&#125;\n​```\n\n​```javascript\n    function hello() &#123;\n    \tconsole.log(\"Hello Peilin\")\n    &#125;\n​```\n\n\n\n效果\npublic static void main(String[] args) &#123;\n    System.out.println(\"Hello Peilin\");\n&#125;\n\nfunction hello() &#123;\n    console.log(\"Hello Peilin\")\n&#125;\n\n分割线\n说明：使用 三个以上的 - 或者 三个以上的 *\n\n代码\n***\n****\n---\n----\n\n图片\n说明\n其中 图片alt 为图片不能展示时展示的内容； url为图片的路径，可以是相对路径、绝对路径、网络路径； 图片名称为鼠标悬浮图片上展示内容\n\n代码\n![图片alt]('图片url' '图片名称')\n\n如\n\t\n![image-20230622235021158](markdown-learn/image-20230622235021158.png '皮皮猫')\n\n其中 图片alt 为图片不能展示时展示的内容； url为图片的路径，可以是相对路径、绝对路径、网络路径\n\n效果如下\n\n\n\n列表\n无序列表\n\n说明：在行首，使用 - * + 任意一个加空格 space ，接文本即可； 若想成为下一级，则在行首加Tab或者3个空格\n\n代码\n- 无序列表1\n\t- 无序列表1 子列表\n* 无序列表2\n+ 无序列表3\n\n效果\n\n\n\n\n有序列表\n\n说明：在行首 使用数字 . space 接文本即可\n\n代码\n1. 列表内容\n2. 列表内容\n3. 列表内容\n\n效果\n\n列表内容\n列表内容\n列表内容\n\n\n\n\n\n表格\n说明： 直接见代码\n\n代码\nname | age | gender\n--|:--:|--:\npipi | 4 | male\nhanhan | 2 | male\n\n:-- 左对齐\n--: 右对齐\n:--: 居中对齐\n\n效果\n\n\n\nname\nage\ngender\n\n\n\npipi\n4\nmale\n\n\nhanhan\n2\nmale\n\n\n\n\n链接\n代码\n[名称](地址)\n\n如\n\n[百度](https://www.baidu.com)\n\n百度\n\n说明\n通过上述方式创建的链接是页面内跳转。 如果想实现点击打开新标签页，则需要使用html a标签，具体代码如下\n&lt;a href=\"https://www.baidu.com\" target=\"_blank\">百度&lt;/a>\n\n百度\n\n\n转义\n说明： 在Markdown语法中有许多字符都表示着不同的功能，如果想使用原本字符，直接加 \\ 在该字符之前进行转义即可。 比如你想用 - 字符， 结果发现 - 加 空格就变成了无序列表，此时直接  \\- 即可。\n\n\n其他在markdown中， 同样可以使用html进行替代，但就编写文档而言，markdown语法更加精炼简洁，功能上也基本够用。 当然就像链接一样，可能有的功能达不到你的需求，这时候使用html可能就能满足你的需求。   \nmarkdown转pdf &#x2F; word 可以使用typora的自带导出功能。 也可以使用Pandoc\n\n欢迎补充指正，\n以上。\nBy Peilin\n— Life Oriented Programming —\n","slug":"markdown-learn","date":"2023-06-21T17:49:14.000Z","categories_index":"","tags_index":"markdown","author_index":"Peilin"}]