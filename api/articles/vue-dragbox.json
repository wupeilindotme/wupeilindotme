{"title":"vue-dragbox 叠层拖动框","uid":"00c071c4589539354f157ade6456752e","slug":"vue-dragbox","date":"2023-07-05T16:27:23.000Z","updated":"2023-07-31T07:44:47.963Z","comments":true,"path":"api/articles/vue-dragbox.json","keywords":null,"cover":null,"content":"<h1 id=\"vue-dragbox-拖动框\"><a href=\"#vue-dragbox-拖动框\" class=\"headerlink\" title=\"vue dragbox - 拖动框\"></a>vue dragbox - 拖动框</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>在工作中，遇到这样一个需求： 甲方老板需要系统内的所有弹窗做成类似windows桌面那样， 可以拖动且按层级展示。</p>\n<p>那本文就用vue来实现一个通用的拖动框组件。</p>\n<h2 id=\"思想\"><a href=\"#思想\" class=\"headerlink\" title=\"思想\"></a>思想</h2><p>要实现这个功能，可以分为以下几步：</p>\n<ol>\n<li><p>拖动</p>\n<p>改变元素的x , y定位， 可以联想到使用css中的 <code>transform : translate()</code> ； </p>\n<p>拖动可以拆解为3个动作：</p>\n<ol>\n<li>鼠标按下 <code>mousedown</code></li>\n<li>鼠标拖动 <code>mousemove</code></li>\n<li>鼠标弹起 <code>mouseup</code></li>\n</ol>\n</li>\n<li><p>层级</p>\n<p>点击某个弹窗，将该弹窗的zIndex设置为比当前zIndex更大即可； 如果是用的element-ui， 可以使用 <code>PopupManager.js</code> 实现层级管理</p>\n</li>\n<li><p>组件封装</p>\n<p>使用插槽的方式，将弹窗内容包含在该组件里面</p>\n</li>\n</ol>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><h3 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h3><pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div\n    class&#x3D;&quot;draggable-box&quot;\n    :class&#x3D;&quot;draggable?&#39;cursorM&#39;:&#39;&#39;&quot;\n    :style&#x3D;&quot;&#123;\n      width: &#96;$&#123;width&#125;px&#96;,\n      height: &#96;$&#123;height&#125;px&#96;,\n      backgroundColor: background,\n      transform: &#96;translate($&#123;x&#125;px, $&#123;y&#125;px)&#96;,\n      zIndex: zIndex,\n    &#125;&quot;\n    @mousedown.prevent&#x3D;&quot;dragStart&quot;\n    @mousemove.prevent&#x3D;&quot;drag&quot;\n    @mouseup.prevent&#x3D;&quot;dragEnd&quot;\n  &gt;\n    &lt;slot&gt;&lt;&#x2F;slot&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script&gt;\n  import &#123; PopupManager &#125; from &#39;element-ui&#x2F;lib&#x2F;utils&#x2F;popup&#39;;\n\n  export default &#123;\n    name: &#39;DraggableBox&#39;,\n    props: &#123;\n      x: &#123;\n        type: Number,\n        default: 0,\n      &#125;,\n      y: &#123;\n        type: Number,\n        default: 0,\n      &#125;,\n      width: &#123;\n        type: Number,\n        default: 5120,\n      &#125;,\n      height: &#123;\n        type: Number,\n        default: 0,\n      &#125;,\n      background: &#123;\n        type: String,\n        default: &#39;transparent&#39;,\n      &#125;,\n      zIndex: &#123;\n        type: Number,\n        &#x2F;&#x2F; 默认为当前层级+100\n        default: PopupManager.nextZIndex() + 100,\n      &#125;,\n      draggable: &#123;\n        type: Boolean,\n        default: true\n      &#125;\n    &#125;,\n    data() &#123;\n      return &#123;\n        isDragging: false,\n        startPosition: &#123; x: 0, y: 0 &#125;,\n      &#125;\n    &#125;,\n    methods: &#123;\n      &#x2F;&#x2F; 开始拖动\n      dragStart(event) &#123;\n        if(this.draggable)&#123;\n          this.isDragging &#x3D; true\n          this.startPosition.x &#x3D; event.clientX - this.x\n          this.startPosition.y &#x3D; event.clientY - this.y\n          &#x2F;&#x2F; 开始拖动时，将当前zIndex设置为最大，实现弹窗层级\n          this.zIndex &#x3D; PopupManager.nextZIndex();\n        &#125;\n      &#125;,\n      &#x2F;&#x2F; 拖动中改变 x,y\n      drag(event) &#123;\n        if(this.draggable) &#123;\n          if (!this.isDragging) return\n          this.x &#x3D; event.clientX - this.startPosition.x\n          this.y &#x3D; event.clientY - this.startPosition.y\n        &#125;\n      &#125;,\n      &#x2F;&#x2F; 拖动结束\n      dragEnd() &#123;\n        this.isDragging &#x3D; false\n      &#125;,\n    &#125;,\n  &#125;\n&lt;&#x2F;script&gt;\n\n&lt;style scoped&gt;\n  .cursorM&#123;\n    cursor: move;\n\n  &#125;\n  .draggable-box &#123;\n    position: absolute;\n  &#125;\n&lt;&#x2F;style&gt;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n\t&lt;DragBox&gt;\n        &lt;!-- 在此处定义你的对话框内容 --&gt;\n    \t&lt;div class&#x3D;&quot;dialog&quot;&gt;\n    \t\tLife Oriented Programming\n    \t&lt;&#x2F;div&gt;\n    &lt;&#x2F;DragBox&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script&gt;\n&#x2F;&#x2F; 换成自己的项目路径\nimport DragBox from &#39;@&#x2F;components&#x2F;Dragbox&#39;;\n    \nexport default &#123;\n    name: &#39;mytest&#39;,\n    components: &#123;DragBox&#125;,\n    data() &#123;\n        return &#123;\n            \n        &#125;\n    &#125;\n&#125;\n\n&lt;&#x2F;script&gt;\n\n&lt;style scoped&gt;\n    .dialog &#123;\n        position: absolute;\n        width: 1000px;\n        height: 500px;\n        border: 1px solid #FFF;\n    &#125;\n&lt;&#x2F;style&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<hr>\n<p>以上就是使用vue实现拖动框组件的内容。</p>\n<p><em><strong>Life Oriented Programming</strong></em></p>\n","feature":true,"text":"vue dragbox - 拖动框前言在工作中，遇到这样一个需求： 甲方老板需要系统内的所有弹窗做成类似windows桌面那样， 可以拖动且按层级展示。 那本文就用vue来实现一个通用的拖动框组件。 思想要实现这个功能，可以分为以下几步： 拖动 改变元素的x , y定位， 可以联...","link":"","photos":[],"count_time":{"symbolsCount":"3.7k","symbolsTime":"3 mins."},"categories":[],"tags":[{"name":"Vue.js","slug":"Vue-js","count":1,"path":"api/tags/Vue-js.json"},{"name":"前端","slug":"前端","count":1,"path":"api/tags/前端.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#vue-dragbox-%E6%8B%96%E5%8A%A8%E6%A1%86\"><span class=\"toc-text\">vue dragbox - 拖动框</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%89%8D%E8%A8%80\"><span class=\"toc-text\">前言</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%9D%E6%83%B3\"><span class=\"toc-text\">思想</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\">代码</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">实现</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B\"><span class=\"toc-text\">示例</span></a></li></ol></li></ol></li></ol>","author":{"name":"Peilin","slug":"blog-author","avatar":"https://www.z4a.net/images/2023/06/23/image-20230622235021158.png","link":"/","description":"Life Oriented Programming","socials":{"github":"https://github.com/wupeilindotme","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Java实现树形接口","uid":"d696be916da802ad82e97dd238415af6","slug":"java-tree-node","date":"2023-07-05T16:33:32.000Z","updated":"2023-07-31T07:44:47.963Z","comments":true,"path":"api/articles/java-tree-node.json","keywords":null,"cover":null,"text":"Java实现树形接口前言做后端开发，遇到树形结构的情况可以说是非常多。菜单、部门机构等都会用到。 这种经常遇见且通用的功能无需针对每个业务去写冗余代码，本文就介绍一下如何实现一个通用的树形结构，将集合树形化。 注：JDK版本需要在1.8以上 思想 在关系型数据库表中实现树形父子级...","link":"","photos":[],"count_time":{"symbolsCount":"3.3k","symbolsTime":"3 mins."},"categories":[],"tags":[{"name":"Java","slug":"Java","count":2,"path":"api/tags/Java.json"},{"name":"后端","slug":"后端","count":1,"path":"api/tags/后端.json"},{"name":"技巧分享","slug":"技巧分享","count":1,"path":"api/tags/技巧分享.json"}],"author":{"name":"Peilin","slug":"blog-author","avatar":"https://www.z4a.net/images/2023/06/23/image-20230622235021158.png","link":"/","description":"Life Oriented Programming","socials":{"github":"https://github.com/wupeilindotme","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"nvm","uid":"bb404c7dbd8eec4e7c8b388c731f8864","slug":"nvm","date":"2023-06-23T22:59:01.000Z","updated":"2023-07-31T07:44:47.963Z","comments":true,"path":"api/articles/nvm.json","keywords":null,"cover":null,"text":"前言在使用Hexo搭建博客时，推荐安装16.x以上版本的nodejs。 但是自己电脑工作时所用的node版本是14.x， 如果为了搭建博客又去安装其他版本的node，需要手动去切换环境变量。 切换来回避免不了麻烦甚至出错，于是想着有没有一个更加好的解决方案。 这就是本文要介绍的 ...","link":"","photos":[],"count_time":{"symbolsCount":"3.3k","symbolsTime":"3 mins."},"categories":[],"tags":[{"name":"Node.js","slug":"Node-js","count":1,"path":"api/tags/Node-js.json"},{"name":"开发环境管理","slug":"开发环境管理","count":1,"path":"api/tags/开发环境管理.json"}],"author":{"name":"Peilin","slug":"blog-author","avatar":"https://www.z4a.net/images/2023/06/23/image-20230622235021158.png","link":"/","description":"Life Oriented Programming","socials":{"github":"https://github.com/wupeilindotme","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}